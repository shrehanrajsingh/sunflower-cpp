# All the features in my language, with this one as well (a comment)

a = 10
b = "Hello, World!"
c = a
d = none
e = true
f = false
putln (a)
putln (b)
putln (c)

a = [1, [2, 3], 4, 5]
putln (a[0])
putln (a[1])
putln (a[1][1])

if true
    putln ("Inside if")
else if true
    putln ("Inside else if")
else
    putln ("Inside else")

fun test(a)
    write ("Received argument: ", a)
    return a

test(10)

a = {
    "hello": "hi",
    "a": {
        "a": 1,
        "b": 2
    }
}

for i in a
    write (i, a[i])

details = [
    {
        "name": "Shrehan",
        "age": 19,
        "dob": 190706
    },
    {
        "name": "John",
        "age": 19,
        "dob": 999999
    }
]

for i in details
    write (i)
    for j in i
        write(j, i[j])

a = 1
a = a + 1
write(a)

fun nth_fib (n)
    f1 = 0
    f2 = 1

    while n - 1 > 0
        t = f2
        f2 = f1 + f2
        f1 = t
        n = n - 1
    
    write ('nth fibonacci is:', f1)

for i in 1 to 30
    nth_fib (i)

fun nth_fib (n)
    f1 = 0
    f2 = 1

    while n > 1
        t = f2
        f2 = f1 + f2
        f1 = t
        n = n - 1
    
    return f2

fun fact (n)
    if n == 1
        return n
    return fact (n - 1) * n

write(fact(5), nth_fib(5))

a = nth_fib(20)
write (a)

fun nth_fib_short (n)
    [f1, f2] = [0, 1]

    while n > 1
        [f1, f2, n] = [f2, f1 + f2, n - 1]
    
    return f2

fun nth_fib_r (n)
    if n < 2
        return n
    return nth_fib_r(n - 1) + nth_fib_r(n - 2)

for i in 1 to 20
    write (nth_fib_short(i), nth_fib_r (i))

class List
    n = none
    v = none

    fun _init(self, v, n)
        self.n = n
        self.v = v
    
    fun print(self)
        b = self
        while b
            write(b.v)
            b = b.n

a = List(10, List(20, List(30, List(40, List(50, none)))))
a.print()

class TreeNode
    value = none
    left = none
    right = none
    
    fun _init(self, value)
        self.value = value
        self.left = none
        self.right = none
    
    fun insert(self, value)
        if value < self.value
            if self.left == none
                self.left = TreeNode(value)
            else
                self.left.insert(value)
        else
            if self.right == none
                self.right = TreeNode(value)
            else
                self.right.insert(value)
    
    fun inorder_traversal(self)
        if self.left
            self.left.inorder_traversal()
        write(self.value)
        if self.right
            self.right.inorder_traversal()
    
    fun preorder_traversal(self)
        write(self.value)
        if self.left
            self.left.preorder_traversal()
        if self.right
            self.right.preorder_traversal()
    
    fun postorder_traversal(self)
        if self.left
            self.left.postorder_traversal()
        if self.right
            self.right.postorder_traversal()
        write(self.value)
    
    fun search(self, value)
        if self.value == value
            return true
        if value < self.value
            if self.left
                return self.left.search(value)
        if value >= self.value
            if self.right
                return self.right.search(value)
        return false

tree = TreeNode(25)
tree.insert(15)
tree.insert(50)
tree.insert(10)
tree.insert(22)
tree.insert(35)
tree.insert(70)

write("In-order traversal:")
tree.inorder_traversal()

write("Post-order traversal")
tree.postorder_traversal()

write("Pre-order traversal")
tree.preorder_traversal()

write (true or false and false)
write (not true and false)
write (not true or true and false)
write (false or not false and true)
write (not (true and false) or false)
write (not true and (false or true))
write (true and not false or false)
write (not (false or true) and true)
write (true or not true and false or not false)
write (not true and not false or true)

SHOPPING_CART = 0

APPLE =     1 << 0
BANANA =    1 << 1
CABBAGE =   1 << 2
ORANGE =    1 << 3
JUICE =     1 << 4

SHOPPING_CART = SHOPPING_CART | APPLE
SHOPPING_CART = SHOPPING_CART | BANANA

if SHOPPING_CART & APPLE
    write ("Apple is in cart")

if SHOPPING_CART & BANANA
    write ("Banana is in cart")

if not SHOPPING_CART & JUICE
    write ("Juice is not in cart")

SHOPPING_CART = SHOPPING_CART | JUICE

if SHOPPING_CART & JUICE
    write ("Juice is in cart")

SHOPPING_CART = SHOPPING_CART & ~JUICE

if SHOPPING_CART & JUICE
    write ("Juice is in cart")
else
    write ("Juice is not in cart")

i = 10
repeat i
    repeat i
        put ('*')
    i = i - 1
    putln ('')

i = 10 repeat 5
write (i)

i = 0 repeat 5 repeat 5 # grid of 5x5 with 0s
write (i)

a = [i, j] for j in 1 to 10 for i in 1 to 10
for i in a
    for j in i
        write (j)

write ("0123456789"[1 to 10 step 2])
write ("a123456789"[0])
write ([1, 2, 3, 4, 5][0 to 5 step 2])

fun legal_age (a)
    if a < 18
        return ? "Below legal age"
    return true

legal_age (19)
legal_age (18)
try
    legal_age (17)
catch E
    if E == "Below legal age"
        write ("<18")

fun age (a)
    if a < 18
        return ? "Below legal age"
    else if a > 999
        return ? "Too old"
    return a

a = try age (17) catch 18
write (a)
a = try age (17) catch e -> e
write (a)
a = try age (17) catch e -> {'Below legal age': 18}[e]
write (a)
a = try age (1020) catch 999
write (a)
a = try age (1020) catch e -> {'Below legal age': 18, 'Too old': 19}[e]
write (a)

import '_Native_File' as file

a = file.open ('../../tests/test.sf', 'r') # returns a numeric id
write (a) # print id
write (file.read (a))
file.close (a)

class File
    id = 0

    fun _init (self, name, perms)
        self.id = file.open (name, perms)

        # this is a workaround to
        # to raise an error, since
        # the return value of _init
        # is discarded
        if not self.id
            _ = ? "File could not be opened"
    
    fun read (self)
        if not self.id
            return ? "File has not been created or is closed"
        
        return file.read (self.id)
    
    fun close (self)
        if self.id
            file.close (self.id)
            self.id = 0

a = File ("../../tests/test.sf", "r")
write (a.read ())
a.close ()
write (a.read ())

import '_Native_Thread' as thread

fun test (a, b, c)
    write ("TEST THREAD")
    sum = 0
    for i in 1 to 10000
        sum = sum + i
    write ("SUM IS", sum)

th = thread.create (test, [1, 2, 3])
thread.run (th)
write ("here")

thread.join_all ()